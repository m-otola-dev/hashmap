from a6_include import *


def hash_function_1(key: str) -> int:
    """
    Sample Hash function #1 to be used with A5 HashMap implementation
    DO NOT CHANGE THIS FUNCTION IN ANY WAY
    """
    hash = 0
    for letter in key:
        hash += ord(letter)
    return hash


def hash_function_2(key: str) -> int:
    """
    Sample Hash function #2 to be used with A5 HashMap implementation
    DO NOT CHANGE THIS FUNCTION IN ANY WAY
    """
    hash, index = 0, 0
    index = 0
    for letter in key:
        hash += (index + 1) * ord(letter)
        index += 1
    return hash


class HashMap:
    def __init__(self, capacity: int, function) -> None:
        """
        Init new HashMap based on DA with SLL for collision resolution
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        self.buckets = DynamicArray()
        for _ in range(capacity):
            self.buckets.append(LinkedList())
        self.capacity = capacity
        self.hash_function = function
        self.size = 0

    def __str__(self) -> str:
        """
        Overrides object's string method
        Return content of hash map t in human-readable form
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        out = ''
        for i in range(self.buckets.length()):
            list = self.buckets.get_at_index(i)
            out += str(i) + ': ' + str(list) + '\n'
        return out

    def clear(self) -> None:
        """
        This method clears the entire Hash Map while
        maintaining capacity
        """

        ll = LinkedList()
        for i in range(self.buckets.length()):
            # for all elements in HM, clear the size &
            # set each element to an empty linked list
            self.size = 0
            self.buckets.set_at_index(i, ll)

    def get(self, key: str) -> object:
        """
        Returns the value at the specified key. If key
        does not exist, method returns None
        """
        # if there is no key return None
        if self.contains_key(key) is not True:
            return None

        # return the value at specified key. key is computed by mod-operating(%)
        # number of elements by number of cells (self.capacity)
        index = self.hash_function(key) % self.capacity
        return self.buckets.get_at_index(index).contains(key).value

    def put(self, key: str, value: object) -> None:
        """
        Updates key/value pair in HashMap. If key/value already exists,
        value is replaced by new value. If no key exists, a
        key/value pair will be added to the HashMap.
        """
        # initializing variables
        # converting key to int and into a smaller number to use as an index
        index = self.hash_function(key) % self.capacity
        lst = self.buckets.get_at_index(index)

        # if key/value pair already exists, remove it and decrement size by 1
        if lst.contains(key):
            lst.remove(key)
            self.size -= 1

        # insert new key/value pair into hash map & increment size by 1
        lst.insert(key, value)
        self.size += 1

    def remove(self, key: str) -> None:
        """
        Removes the key/value pair from Hash Map. If there is no
        existing key, nothing happens
        """
        # initializing variables
        # converting key to int and into a smaller number to use as an index
        index = self.hash_function(key) % self.capacity
        lst = self.buckets.get_at_index(index)

        # if hash map contains the key being requested,
        # if removes the value at the given index and
        # decrements the size by 1
        if lst.contains(key):
            self.buckets.get_at_index(index).remove(key)
            self.size -= 1

        # if there is not existing key, return None
        return None

    def contains_key(self, key: str) -> bool:
        """
        Checks to see if hash map contains key & returns
        True if so. Returns False otherwise
        """
        # initializing variables
        # converting key to int and into a smaller number to use as an index
        index = self.hash_function(key) % self.capacity
        lst = self.buckets

        # if key is in the hash map, it will return True, otherwise False
        if lst.get_at_index(index).contains(key):
            return True
        return False

    def empty_buckets(self) -> int:
        """
        Returns number of empty buckets in Hash Table
        """
        # initializing counter and hash map
        count = 0
        hash = self.buckets

        # for all elements in the hash map, if the bucket at the
        # given index is 0/empty, increment the counter by one
        # will keep counting until no more buckets to count and
        # will return the final value of all empty buckets
        for i in range(0, self.capacity):
            if hash.get_at_index(i).length() == 0:
                count += 1
        return count

    def table_load(self) -> float:
        """
        Returns load factor for hash table
        """
        # returns load factor. lf = stored elements/all buckets in hashmap
        return self.size / self.capacity

    def resize_table(self, new_capacity: int) -> None:
        """
        Changes internal capacity and all existing key/value pairs
        in HashMap. If new capacity is less than 1, this method
        does nothing.
        """
        # initializing new empty HM
        ll = LinkedList()
        hash = DynamicArray()

        # do nothing if new cap is less than 1
        if new_capacity < 1:
            return

        # for each element in new capacity, add that many
        # linked lists to new hashmap
        for i in range(new_capacity):
            hash.append(LinkedList())

        # for elements in existing capacity, insert the key, value pairs into
        # the new HM. if the bucket is empty don't do anything
        for elem in range(0, self.capacity):
            index = self.buckets.get_at_index(elem)
            if self.buckets.length() == 0:
                continue
            for k in index:
                ll.insert(k.key, k.value)

        # size of existing hm is now 0, existing capacity is now new capacity
        # and all existing buckets are now in new dynamic array
        self.size = 0
        self.capacity = new_capacity
        self.buckets = hash

        # for each element in new HM, insert the key, value pair
        for i in ll:
            self.put(i.key, i.value)

    def get_keys(self) -> DynamicArray:
        """
        Returns all the keys stored in the Hash Map
        """
        hash = DynamicArray()
        # get all elements in HM and append to new dynamic array and return
        for i in range(self.buckets.length()):
            for k in self.buckets.get_at_index(i):
                hash.append(k.key)
        return hash


# BASIC TESTING
if __name__ == "__main__":

    print("\nPDF - empty_buckets example 1")
    print("-----------------------------")
    m = HashMap(100, hash_function_1)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key1', 10)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key2', 20)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key1', 30)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key4', 40)
    print(m.empty_buckets(), m.size, m.capacity)

    print("\nPDF - empty_buckets example 2")
    print("-----------------------------")
    m = HashMap(50, hash_function_1)
    for i in range(150):
        m.put('key' + str(i), i * 100)
        if i % 30 == 0:
            print(m.empty_buckets(), m.size, m.capacity)

    print("\nPDF - table_load example 1")
    print("--------------------------")
    m = HashMap(100, hash_function_1)
    print(m.table_load())
    m.put('key1', 10)
    print(m.table_load())
    m.put('key2', 20)
    print(m.table_load())
    m.put('key1', 30)
    print(m.table_load())

    print("\nPDF - table_load example 2")
    print("--------------------------")
    m = HashMap(50, hash_function_1)
    for i in range(50):
        m.put('key' + str(i), i * 100)
        if i % 10 == 0:
            print(m.table_load(), m.size, m.capacity)

    print("\nPDF - clear example 1")
    print("---------------------")
    m = HashMap(100, hash_function_1)
    print(m.size, m.capacity)
    m.put('key1', 10)
    m.put('key2', 20)
    m.put('key1', 30)
    print(m.size, m.capacity)
    m.clear()
    print(m.size, m.capacity)

    print("\nPDF - clear example 2")
    print("---------------------")
    m = HashMap(50, hash_function_1)
    print(m.size, m.capacity)
    m.put('key1', 10)
    print(m.size, m.capacity)
    m.put('key2', 20)
    print(m.size, m.capacity)
    m.resize_table(100)
    print(m.size, m.capacity)
    m.clear()
    print(m.size, m.capacity)

    print("\nPDF - put example 1")
    print("-------------------")
    m = HashMap(50, hash_function_1)
    for i in range(150):
        m.put('str' + str(i), i * 100)
        if i % 25 == 24:
            print(m.empty_buckets(), m.table_load(), m.size, m.capacity)

    print("\nPDF - put example 2")
    print("-------------------")
    m = HashMap(40, hash_function_2)
    for i in range(50):
        m.put('str' + str(i // 3), i * 100)
        if i % 10 == 9:
            print(m.empty_buckets(), m.table_load(), m.size, m.capacity)

    print("\nPDF - contains_key example 1")
    print("----------------------------")
    m = HashMap(10, hash_function_1)
    print(m.contains_key('key1'))
    m.put('key1', 10)
    m.put('key2', 20)
    m.put('key3', 30)
    print(m.contains_key('key1'))
    print(m.contains_key('key4'))
    print(m.contains_key('key2'))
    print(m.contains_key('key3'))
    m.remove('key3')
    print(m.contains_key('key3'))

    print("\nPDF - contains_key example 2")
    print("----------------------------")
    m = HashMap(75, hash_function_2)
    keys = [i for i in range(1, 1000, 20)]
    for key in keys:
        m.put(str(key), key * 42)
    print(m.size, m.capacity)
    result = True
    for key in keys:
        # all inserted keys must be present
        result &= m.contains_key(str(key))
        # NOT inserted keys must be absent
        result &= not m.contains_key(str(key + 1))
    print(result)

    print("\nPDF - get example 1")
    print("-------------------")
    m = HashMap(30, hash_function_1)
    print(m.get('key'))
    m.put('key1', 10)
    print(m.get('key1'))

    print("\nPDF - get example 2")
    print("-------------------")
    m = HashMap(150, hash_function_2)
    for i in range(200, 300, 7):
        m.put(str(i), i * 10)
    print(m.size, m.capacity)
    for i in range(200, 300, 21):
        print(i, m.get(str(i)), m.get(str(i)) == i * 10)
        print(i + 1, m.get(str(i + 1)), m.get(str(i + 1)) == (i + 1) * 10)

    print("\nPDF - remove example 1")
    print("----------------------")
    m = HashMap(50, hash_function_1)
    print(m.get('key1'))
    m.put('key1', 10)
    print(m.get('key1'))
    m.remove('key1')
    print(m.get('key1'))
    m.remove('key4')

    print("\nPDF - resize example 1")
    print("----------------------")
    m = HashMap(20, hash_function_1)
    m.put('key1', 10)
    print(m.size, m.capacity, m.get('key1'), m.contains_key('key1'))
    m.resize_table(30)
    print(m.size, m.capacity, m.get('key1'), m.contains_key('key1'))

    print("\nPDF - resize example 2")
    print("----------------------")
    m = HashMap(75, hash_function_2)
    keys = [i for i in range(1, 1000, 13)]
    for key in keys:
        m.put(str(key), key * 42)
    print(m.size, m.capacity)

    for capacity in range(111, 1000, 117):
        m.resize_table(capacity)

        m.put('some key', 'some value')
        result = m.contains_key('some key')
        m.remove('some key')

        for key in keys:
            result &= m.contains_key(str(key))
            result &= not m.contains_key(str(key + 1))
        print(capacity, result, m.size, m.capacity, round(m.table_load(), 2))

    print("\nPDF - get_keys example 1")
    print("------------------------")
    m = HashMap(10, hash_function_2)
    for i in range(100, 200, 10):
        m.put(str(i), str(i * 10))
    print(m.get_keys())

    m.resize_table(1)
    print(m.get_keys())

    m.put('200', '2000')
    m.remove('100')
    m.resize_table(2)
    print(m.get_keys())
